theme;function_name;what_is_doing;parameters;info;examples;difficulty_understanding;difficulty_using;basic;replaced_by
текстовая;CONCAT();объединение/склеивание (конкатенация) нескольких значений ;входная строка;"Используется для объединения (конкатенации) нескольких значений.
Она принимает переменное количество аргументов, выполняет их конкатенацию и возвращает полученный результат.
Результатом всегда является строка, однако аргументы функции могут принадлежать любым типам, поскольку функция неявно преобразует все аргументы в строки перед объединением.";"SELECT CONCAT(artist, ' - ', trackname)
FROM Songs;
***
CONCAT(artist, ' - ', trackname)
Heart - Crazy On You";средняя;средняя;да;нет
текстовая;CONCAT_WS();объединение/склеивание (конкатенация) нескольких значений с разделителем ;входная строка;"Используется для объединения (конкатенации) нескольких значений с разделителем.
Функция CONCAT_WS() в отличие от функции CONCAT() не только объединяет значения, но и добавляет между ними разделитель.
Разделитель указывается в качестве первого аргумента, объединяемые значения — в качестве всех остальных.";"SELECT CONCAT_WS(', ', id, artist, trackname) AS song
FROM Songs
***
song
1, Heart, Crazy On You";средняя;средняя;нет;CONCAT()
текстовая;CHAR_LENGTH();вычисление длины строки;измеряемая строка;Используется для вычисления длины строки. Она принимает в качестве аргумента строку и возвращает количество символов в ней.;"SELECT CHAR_LENGTH('bee')
***
CHAR_LENGTH('bee')
3";средняя;средняя;да;нет
текстовая;LOWER();перевод строки в нижний регистр;входная строка;"Используется для перевода строки в нижний регистр. 
Она принимает в качестве аргумента строку, преобразует все ее символы в нижний регистр и возвращает полученный результат.
";"SELECT LOWER('BEEGEEK')
***
LOWER('BEEGEEK')
beegeek      ";низкая;низкая;да;нет
текстовая;UPPER();перевод строки в верхний регистр;входная строка;"Используется для перевода строки в верхний регистр. Она принимает в качестве аргумента строку, 
преобразует все ее символы в верхний регистр и возвращает полученный результат.";"SELECT UPPER('beegeek')
***
UPPER('BEEGEEK')
BEEGEEK";низкая;низкая;да;нет
текстовая;LTRIM() ;отсечения ведущих пробелов из левой части строки;входная строка;"Используется для отсечения ведущих пробелов. Принимает в качестве аргумента строку, 
удаляет все пробелы из ее левой части и возвращает полученный результат.";"SELECT LTRIM('   bee');
***
LTRIM('   bee')
bee";средняя;средняя;да;нет
текстовая;RTRIM() ;отсечения ведущих пробелов из правой части строки;входная строка;"Используется для отсечения ведущих пробелов. Принимает в качестве аргумента строку, 
удаляет все пробелы из ее правой части и возвращает полученный результат.";"SELECT RTRIM('bee   ');
***
RTRIM('bee   ')
bee";средняя;средняя;да;нет
текстовая;REVERSE() ;переворот строки;входная строка;Используется для для переворота строки. Принимает в качестве аргумента строку и возвращает ее с обратным порядком символов.;"SELECT REVERSE('beegeek')
***
REVERSE('beegeek')
keegeeb";средняя;средняя;да;нет
текстовая;REPEAT();повторение строки;входная строка;"Используется для повторения строки. Принимает два аргумента в следующем порядке:
1)str — исходная строка
2)count — количество повторений
Возвращает строку, состоящую из строки str, повторяющейся count раз.";"SELECT REPEAT('bee', 3)
***
REPEAT('bee', 3)
beebeebee";средняя;средняя;да;нет
текстовая;LPAD();увеличение длины строки слева;входная строка;"Используется для увеличения длины строки до определенного значения путем добавления в ее начало другой строки.
Принимает три аргумента в следующем порядке:
1)str — исходная строка
2)len — желаемая длина строки
3)padstr — дополняющая строка
Добавляет строку padstr(3) в начало строки str(1) до тех пор, пока длина второй не станет равна len(2), и возвращает полученный результат.
Если желаемая длина строки меньше длины исходной строки, то функция сокращает исходную строку путем отбрасывания правых символов.";"SELECT LPAD('bee', 6, '-+-+')
***
LPAD('bee', 6, '-+-+')
-+-bee
---
SELECT LPAD('bee', 2, '-')
***
LPAD('bee', 2, '-')
be";выше средней;выше средней;да;CONCAT()
текстовая;RPAD();увеличение длины строки справа;входная строка;"Используется для увеличения длины строки до определенного значения путем добавления в ее конец другой строки.
Принимает три аргумента в следующем порядке:
1)str — исходная строка
2)len — желаемая длина строки
3)padstr — дополняющая строка
Добавляет строку padstr(3) в конец строки str(1) до тех пор, пока длина второй не станет равна len(2), и возвращает полученный результат.
Если желаемая длина строки меньше длины исходной строки, то функция сокращает исходную строку путем отбрасывания правых символов.";"SELECT RPAD('bee', 6, '-+-+')
***
RPAD('bee', 6, '-+-+')
bee-+-""
---
SELECT RPAD('bee', 2, '-')
***
RPAD('bee', 2, '-')
be";выше средней;выше средней;да;CONCAT()
текстовая;LEFT();извлечение определенного количества символов из начала строки;входная строка;"Используется для извлечения определенного количества символов из начала строки.
Принимает два аргумента в следующем порядке:
1)str — исходная строка
2)count — количество извлекаемых символов
Функция возвращает строку, состоящую из первых count(2) символов строки str(1).
Если количество извлекаемых символов меньше 1, функция вернет пустую строку.
Если количество извлекаемых символов больше длины строки, функция вернет всю строку.";"SELECT LEFT('beegeek', 3)
***
LEFT('beegeek', 3)
bee
---
SELECT LEFT('beegeek', 0)
***
LEFT('beegeek', -1)
пустая строка
---
SELECT LEFT('beegeek', 50)
***
LEFT('beegeek', 50)
beegeek";средняя;средняя;да;"LPAD()
RPAD()"
текстовая;RIGHT();извлечение определенного количества символов из конца строки;входная строка;"Используется для извлечения определенного количества символов из конца строки.
Принимает два аргумента в следующем порядке:
1)str — исходная строка
2)count — количество извлекаемых символов
Функция возвращает строку, состоящую из последних count символов строки str.
Если количество извлекаемых символов меньше 1, функция вернет пустую строку, если больше длины строки — всю строку.";"SELECT RIGHT('beegeek', 3)
***
RIGHT('beegeek', 3)
eek
---
SELECT RIGHT('beegeek', -1)
***
RIGHT('beegeek', -1)
пустая строка
---
SELECT RIGHT('beegeek', 50)
***
RIGHT('beegeek', 50)
beegeek";средняя;средняя;да;"LPAD()
RPAD()"
текстовая;LOCATE();определение местоположения подстроки в строке;входная строка;"Используется для определения местоположения подстроки в строке.
Принимает три аргумента в следующем порядке:
1)substr — искомая подстрока
2)str — исходная строка
3)start — позиция начала поиска (может не указываться, в таком случае поиск выполняется с начала строки)
Функция выполняет поиск подстроки substr в строке str, начиная с позиции start, и возвращает позицию ее первого вхождения.
При использовании функции символы исходной строки нумеруются с 1, а не с 0.
Функция выполняет поиск позиции подстроки без учета регистра.
Если искомой подстроки в строке нет, функция вернет значение 0.";"SELECT LOCATE('eg', 'beegeek')
***
LOCATE('eg', 'beegeek')
3
---
SELECT LOCATE('GEEK', 'beegeek')
***
LOCATE('GEEK', 'beegeek')
4
---
SELECT LOCATE('eb', 'beegeek')
***
LOCATE('eb', 'beegeek')
0";средняя;средняя;да;нет
текстовая;REPLACE();замена подстроки в строке;входная строка;"Используется для замены подстроки в строке. Принимает три аргумента в следующем порядке:
1)str — исходная строка
2)from_str — заменяемая подстрока
3)to_str — заменяющая подстрока
Функция заменяет все вхождения подстроки from_str(2) в строке str(1) на подстроку to_str(3) и возвращает полученный результат.
Если заменяемой подстроки в строке нет, функция REPLACE() вернет строку в исходном виде.
В отличие от функции LOCATE(), функция REPLACE() выполняет замену с учетом регистра.";"SELECT REPLACE('beegeek', 'e', 'i')
***
REPLACE('beegeek', 'e', 'i')
biigiik
---
SELECT REPLACE('beegeek', 'a', 'i')
***
REPLACE('beegeek', 'a', 'i')
beegeek
---
SELECT REPLACE('beegeek', 'B', 'BBB')
***
REPLACE('beegeek', 'B', 'BBB')
beegeek";выше средней;выше средней;да;CONCAT()
